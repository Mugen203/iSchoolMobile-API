// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iSchool_Solution.Data;

#nullable disable

namespace iSchool_Solution.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250401130643_FinalMigration")]
    partial class FinalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "222CS01000694",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("RefreshTokenExpiry")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "222CS01000694",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "623e0d83-15bb-410e-b00c-ab6d6766627b",
                            Email = "kwakuaffram@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KWAKUAFFRAM@GMAIL.COM",
                            NormalizedUserName = "222CS01000694",
                            PasswordHash = "AQAAAAIAAYagAAAAEPMRUYy+9LEdtWnjrCON1Y6aoCAaUvqHGnmtDrMPKxJzyHz6TQKbToOSPT6Hk7+caQ==",
                            PhoneNumber = "0553138727",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiry = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "7d1541ef-233a-4f6e-93a9-37a3276ee156",
                            StudentFirstName = "Kwaku",
                            StudentID = "222CS01000694",
                            StudentLastName = "Affram",
                            TwoFactorEnabled = true,
                            UserName = "222CS01000694"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Course", b =>
                {
                    b.Property<Guid>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseCredits")
                        .HasColumnType("int");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseID = new Guid("8fd7171a-8a59-4208-aabb-1c0699259052"),
                            CourseCode = "CS101",
                            CourseCredits = 3,
                            CourseDescription = "Provides a foundational overview of the field of computer science.\nCovers basic concepts and principles.",
                            CourseName = "Introduction to Computer Science",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("52d2190e-c7a3-4f7b-ab3b-731e82216d02"),
                            CourseCode = "COSC115",
                            CourseCredits = 3,
                            CourseDescription = "First part of introductory computer science course.\nExplores basic concepts and problem-solving.",
                            CourseName = "Introduction to Computer Science 1",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("28a3020d-c97f-4f0b-a559-b59cfe2a6d3c"),
                            CourseCode = "COSC113",
                            CourseCredits = 3,
                            CourseDescription = "Introduces fundamental programming concepts and techniques.\nFocuses on problem-solving and algorithm design.",
                            CourseName = "Elements of Programming",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("babc17e9-4b27-4ee1-8c79-5c39179eeb68"),
                            CourseCode = "COSC130",
                            CourseCredits = 3,
                            CourseDescription = "Introduces principles of digital electronics and logic circuits.\nCovers digital components and systems.",
                            CourseName = "Digital Electronics",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("8041883e-8a68-42e0-8213-3f8c2669c73e"),
                            CourseCode = "COSC116",
                            CourseCredits = 3,
                            CourseDescription = "Second part of introductory computer science course.\nBuilds on concepts from Introduction to Computer Science I.",
                            CourseName = "Introduction to Computer Science II",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("f29033fa-ffd0-4c70-8726-a4eefa5f72ef"),
                            CourseCode = "COSC124",
                            CourseCredits = 3,
                            CourseDescription = "Focuses on procedural programming paradigms and techniques.\nEmphasizes structured programming and modular design.",
                            CourseName = "Procedural Programming",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("7ff93b84-31e2-4e02-81d1-68785909ccb9"),
                            CourseCode = "COSC210",
                            CourseCredits = 3,
                            CourseDescription = "Covers numerical methods for solving mathematical problems.\nFocuses on algorithms and computational techniques.",
                            CourseName = "Numerical Methods",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("60efbe37-61c0-4dc0-93ef-5d20358e8a30"),
                            CourseCode = "MATH171",
                            CourseCredits = 3,
                            CourseDescription = "Introduces mathematical concepts fundamental to computer science. Covers algebraic structures, logic, and basic calculus.",
                            CourseName = "INTRODUCTORY MATHS FOR COMPUTER SCIENCE",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("62330761-ad34-4969-96c7-47eb3c70f552"),
                            CourseCode = "MATH172",
                            CourseCredits = 3,
                            CourseDescription = "Explores both discrete mathematical structures and continuous mathematical concepts relevant to computing.",
                            CourseName = "DISCRETE AND CONTINUOUS MATHEMATICS",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("520f8d39-11bd-4e16-9add-79661a45985e"),
                            CourseCode = "CSCD210",
                            CourseCredits = 3,
                            CourseDescription = "Studies computational approaches to solving mathematical problems. Focuses on numerical algorithms and their implementation.",
                            CourseName = "NUMERICAL METHODS",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("1f1f83d3-6271-4ac5-964f-2805ae049fa1"),
                            CourseCode = "COSC230",
                            CourseCredits = 3,
                            CourseDescription = "Introduces database concepts and design principles.\nCovers relational database models and SQL.",
                            CourseName = "Database Systems Design",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("4459b5db-fac2-4188-96ac-cf2d4e562f14"),
                            CourseCode = "COSC271",
                            CourseCredits = 3,
                            CourseDescription = "First part of data communication and networking course.\nCovers network fundamentals and protocols.",
                            CourseName = "Data Communication & Computer Network I",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("7e542e0d-713f-437f-8a1d-0133a004b722"),
                            CourseCode = "COSC280",
                            CourseCredits = 3,
                            CourseDescription = "Introduces concepts of information systems and their role in organizations.\nCovers system development and management.",
                            CourseName = "Information Systems",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("eeb2ed1f-1b0f-4a3c-bad3-aab3a35a4796"),
                            CourseCode = "COSC214",
                            CourseCredits = 3,
                            CourseDescription = "Covers the organization and architecture of computer systems.\nExplores hardware components and their interactions.",
                            CourseName = "Computer Organization",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("012bdf77-0b02-4d88-8da0-105ba9f1f829"),
                            CourseCode = "COSC224",
                            CourseCredits = 3,
                            CourseDescription = "Focuses on object-oriented programming principles and paradigms.\nEmphasizes design patterns and software development.",
                            CourseName = "Object-Oriented Programming",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("1b006764-b19a-402b-a17a-f9a12d5f4b76"),
                            CourseCode = "COSC272",
                            CourseCredits = 3,
                            CourseDescription = "Second part of data communication and networking course.\nBuilds upon concepts from Network I.",
                            CourseName = "Data Communication & Computer Network II",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("b8391957-9ad4-4134-8b65-86d891b57d07"),
                            CourseCode = "COSC260",
                            CourseCredits = 3,
                            CourseDescription = "Covers methodologies for analyzing, designing, and developing systems.\nEmphasizes software engineering principles.",
                            CourseName = "Systems Analysis and Design",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("e023c552-f2a5-48a5-88d6-f13f55b6d5bb"),
                            CourseCode = "COSC331",
                            CourseCredits = 3,
                            CourseDescription = "Introduces principles and techniques of computer graphics.\nCovers 2D and 3D graphics rendering and animation.",
                            CourseName = "Computer Graphics",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("fb4cf15a-f794-4b59-bc78-3be63b7b8310"),
                            CourseCode = "COSC360",
                            CourseCredits = 3,
                            CourseDescription = "Focuses on developing web-based applications and services.\nCovers front-end and back-end technologies.",
                            CourseName = "Web Application Development",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("25a7e084-5ce1-48e8-bca7-9cada78ffa26"),
                            CourseCode = "COSC255",
                            CourseCredits = 3,
                            CourseDescription = "Explores the principles and design of operating systems.\nCovers process management, memory management, and file systems.",
                            CourseName = "Operating Systems",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("ab899bae-a14b-4a18-8ff5-b70be8405acc"),
                            CourseCode = "COSC257",
                            CourseCredits = 3,
                            CourseDescription = "Covers computer architecture and microprocessor systems.\nExplores hardware design and organization.",
                            CourseName = "Computer Architecture & Microprocessor Systems",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("a793836a-dd04-40e6-a610-04c45c411837"),
                            CourseCode = "COSC361",
                            CourseCredits = 3,
                            CourseDescription = "First part of data structures and algorithms course.\nCovers fundamental data structures and algorithm analysis.",
                            CourseName = "Data Structures & Algorithm I",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("f489fc5f-0029-4a95-9fa9-ec6d63a33e0c"),
                            CourseCode = "COSC425",
                            CourseCredits = 3,
                            CourseDescription = "Focuses on developing applications for mobile platforms.\nCovers mobile OS, UI design, and development tools.",
                            CourseName = "Mobile Application Development",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("8f5abb46-f621-4b96-9e1b-e6e84aba4b41"),
                            CourseCode = "COSC357",
                            CourseCredits = 3,
                            CourseDescription = "Covers principles and techniques of project planning and management.\nFocuses on software project management.",
                            CourseName = "Project Planning and Management",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("c0fff6d8-640b-44a4-ba64-9c550052ef80"),
                            CourseCode = "COSC240",
                            CourseCredits = 3,
                            CourseDescription = "Focuses on low-level programming and system-level interactions.\nCovers OS APIs and system calls.",
                            CourseName = "Systems Programming",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("064f2d40-55de-4ff5-a56c-c57c1dd562f4"),
                            CourseCode = "COSC364",
                            CourseCredits = 3,
                            CourseDescription = "Introduces research methodologies and techniques.\nPrepares students for conducting research projects.",
                            CourseName = "Research Methods",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            CourseCode = "COSC370",
                            CourseCredits = 3,
                            CourseDescription = "Covers operations research techniques for optimization and decision-making.\nApplies mathematical modeling to solve real-world problems.",
                            CourseName = "Operations Research",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("20acdf30-8b86-4b77-921d-02b0bc9ee0d5"),
                            CourseCode = "COSC325",
                            CourseCredits = 3,
                            CourseDescription = "Introduces principles and practices of computer security.\nCovers threats, vulnerabilities, and security mechanisms.",
                            CourseName = "Computer Security",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("435500b2-b00d-4a63-8571-a77f5aadc28d"),
                            CourseCode = "COSC250",
                            CourseCredits = 3,
                            CourseDescription = "Explores ethical issues in computing and information technology.\nDiscusses social and professional responsibilities.",
                            CourseName = "Computer Ethics",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("e1f195d3-4c19-4b33-a3ae-f2ac1f4e243e"),
                            CourseCode = "COSC429",
                            CourseCredits = 3,
                            CourseDescription = "Covers principles and technologies of cloud computing.\nExplores cloud platforms and service models.",
                            CourseName = "Cloud Computing Systems",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("2722aef8-8ead-4d5f-8841-e905e4f8dc63"),
                            CourseCode = "COSC445",
                            CourseCredits = 3,
                            CourseDescription = "Covers entrepreneurship principles and human development in technology.\nFocuses on innovation and business skills.",
                            CourseName = "Entrepreneurship and Human Development",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("86293383-c8de-4941-b83a-4b7c88a53ae1"),
                            CourseCode = "COSC447",
                            CourseCredits = 3,
                            CourseDescription = "Covers advanced software engineering methodologies and practices.\nEmphasizes team-based software development.",
                            CourseName = "Software Engineering",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("3d27b128-0ce6-4990-9c5a-a21de5a414b5"),
                            CourseCode = "COSC455",
                            CourseCredits = 3,
                            CourseDescription = "Introduces fundamental concepts and techniques of artificial intelligence.\nCovers AI algorithms and applications.",
                            CourseName = "Introduction to Artificial Intelligence",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("e806b9b1-e27f-48df-9534-abe0ec02a5ab"),
                            CourseCode = "COSC330",
                            CourseCredits = 3,
                            CourseDescription = "Covers techniques for computer simulation and systems modeling.\nApplies computational methods to model real-world systems.",
                            CourseName = "Computer Simulation & Systems Modeling",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("3d5c9296-405d-4648-addf-2b0706b77169"),
                            CourseCode = "COSC491",
                            CourseCredits = 3,
                            CourseDescription = "First part of the final year project in computer science.\nStudents begin research and project development.",
                            CourseName = "Final Year Project 1",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("58bbeec1-d95e-41f9-af74-a517457235c6"),
                            CourseCode = "COSC436",
                            CourseCredits = 3,
                            CourseDescription = "Elective course focusing on computer and cyber forensics.\nCovers digital investigation techniques and cybercrime analysis.",
                            CourseName = "Computer & Cyber Forensics (Elective 1)",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("baa9502b-bf06-451c-a53b-357973a88fd1"),
                            CourseCode = "COSC440",
                            CourseCredits = 3,
                            CourseDescription = "Elective course on computer vision principles and applications.\nCovers image processing and analysis techniques.",
                            CourseName = "Computer Vision (Elective 2)",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("156ae504-b1fb-4981-af79-8a70f8b19bfa"),
                            CourseCode = "COSC466",
                            CourseCredits = 3,
                            CourseDescription = "Elective course on systems and network administration.\nCovers server management, networking, and security.",
                            CourseName = "Systems and Network Administration (Elective 3)",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("4e99258c-12cd-46b4-bf5b-136de3664bdb"),
                            CourseCode = "COSC480",
                            CourseCredits = 3,
                            CourseDescription = "Covers the principles and techniques of compiler design.\nExplores lexical analysis, parsing, and code generation.",
                            CourseName = "Compiler Design",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("e528b274-541c-4ba6-b4a8-5480a190f7be"),
                            CourseCode = "COSC492",
                            CourseCredits = 3,
                            CourseDescription = "Second part of the final year project in computer science.\nStudents complete their research and project development.",
                            CourseName = "Final Year Project II",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        },
                        new
                        {
                            CourseID = new Guid("87097a1a-aca0-42f0-8ce3-65995891a0ea"),
                            CourseCode = "RELB163",
                            CourseCredits = 3,
                            CourseDescription = "Explores the life, ministry, and teachings of Jesus Christ.\nProvides a theological perspective.",
                            CourseName = "Life and Teachings of Jesus",
                            DepartmentID = new Guid("0b83411d-1567-4463-a5f0-8fa87a420874")
                        },
                        new
                        {
                            CourseID = new Guid("fc6943fa-c904-4b85-9232-eba8c33c485e"),
                            CourseCode = "RELB251",
                            CourseCredits = 3,
                            CourseDescription = "Explores fundamental principles of Christian faith and theology.\nProvides a comprehensive overview.",
                            CourseName = "Principles of Christian Faith",
                            DepartmentID = new Guid("0b83411d-1567-4463-a5f0-8fa87a420874")
                        },
                        new
                        {
                            CourseID = new Guid("fae9d171-eecf-4b51-87c6-08e9b8bb3b21"),
                            CourseCode = "RELT385",
                            CourseCredits = 3,
                            CourseDescription = "Introduces biblical foundations and ethical principles.\nExplores theological and ethical frameworks.",
                            CourseName = "Introduction to Biblical Foundation & Ethics",
                            DepartmentID = new Guid("0b83411d-1567-4463-a5f0-8fa87a420874")
                        },
                        new
                        {
                            CourseID = new Guid("fd9a3b1a-af4d-4232-8663-bb0af5c428a0"),
                            CourseCode = "RELG451",
                            CourseCredits = 3,
                            CourseDescription = "Explores biblical perspectives on family dynamics and relationships.\nProvides theological insights into family life.",
                            CourseName = "Bible and Family Dynamics",
                            DepartmentID = new Guid("0b83411d-1567-4463-a5f0-8fa87a420874")
                        },
                        new
                        {
                            CourseID = new Guid("0922f512-59fd-43c4-9d36-cdd18fccfb13"),
                            CourseCode = "ACCT210",
                            CourseCredits = 3,
                            CourseDescription = "Introduces basic accounting principles and practices.\nCovers financial accounting fundamentals.",
                            CourseName = "Introduction to Accounting",
                            DepartmentID = new Guid("c1e22698-ee7e-45eb-8c4c-85e603306812")
                        },
                        new
                        {
                            CourseID = new Guid("095a4f84-f388-4a49-9994-43eb52ec18e0"),
                            CourseCode = "MGNT234",
                            CourseCredits = 3,
                            CourseDescription = "Introduces fundamental management principles and theories.\nCovers planning, organizing, leading, and controlling.",
                            CourseName = "Principles of Management",
                            DepartmentID = new Guid("c1e22698-ee7e-45eb-8c4c-85e603306812")
                        },
                        new
                        {
                            CourseID = new Guid("0badf6bd-77ef-4c6d-a568-912b57daf884"),
                            CourseCode = "ENGL111",
                            CourseCredits = 2,
                            CourseDescription = "Develops fundamental language and writing skills.\nFocuses on grammar, vocabulary, and basic composition.",
                            CourseName = "Language and Writing Skills I",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("13a87b42-12ce-4cbc-8011-fc2c792f29e5"),
                            CourseCode = "ENGL112",
                            CourseCredits = 2,
                            CourseDescription = "Continues development of language and writing skills.\nBuilds upon skills from Language and Writing Skills I.",
                            CourseName = "Language and Writing Skills II",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("13c34157-f376-4a31-9391-7fdd4d7fbdb7"),
                            CourseCode = "CMME115",
                            CourseCredits = 2,
                            CourseDescription = "Introduces fundamental communication theories and practices.\nDevelops effective communication abilities.",
                            CourseName = "Introduction to Communication Skills",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("1897059a-c3fc-4cb3-a6dc-0aa23f62fc4d"),
                            CourseCode = "FREN121",
                            CourseCredits = 2,
                            CourseDescription = "Introduces basic French language skills for communication.\nCovers fundamental grammar and vocabulary.",
                            CourseName = "French for General Communication 1",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("1a46ac1d-c607-4225-9002-e14a4c1e3363"),
                            CourseCode = "PEAC100",
                            CourseCredits = 0,
                            CourseDescription = "Promotes physical fitness and well-being through activity.\nEncourages a healthy lifestyle.",
                            CourseName = "Physical Activity",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("20a3f858-958e-42b0-b841-e907b592ce0e"),
                            CourseCode = "GNED125",
                            CourseCredits = 1,
                            CourseDescription = "Develops effective learning and study strategies.\nEnhances academic performance and efficiency.",
                            CourseName = "Study Skills",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("2274f76c-d939-47c9-89c2-8284728f2c7a"),
                            CourseCode = "PHYS103",
                            CourseCredits = 3,
                            CourseDescription = "Introduces fundamental principles of physics.\nCovers mechanics, heat, light, and sound.",
                            CourseName = "Physics",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("23665740-f571-4a6e-b3b4-8cdcb719d2fc"),
                            CourseCode = "SOC1105/PSYC105",
                            CourseCredits = 3,
                            CourseDescription = "Introduces basic concepts of Sociology OR Psychology.\nStudents choose one of these introductory social science courses.",
                            CourseName = "General Sociology OR Intro to Psychology",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("30677d50-b76e-4826-b24a-b7251602ee22"),
                            CourseCode = "GNED230",
                            CourseCredits = 1,
                            CourseDescription = "Guides students in exploring career options and planning their future.\nDevelops career readiness skills.",
                            CourseName = "Career Exploration and Planning",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("32ff3746-075f-4a74-bdaa-ed776cf854ff"),
                            CourseCode = "HLTH200",
                            CourseCredits = 3,
                            CourseDescription = "Explores key health principles and practices.\nPromotes healthy living and disease prevention.",
                            CourseName = "Health Principles",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("564d341f-7ccf-4eb4-b250-f32d6cb1c633"),
                            CourseCode = "AFST205",
                            CourseCredits = 1,
                            CourseDescription = "African Studies Course - Placeholder. Replace with actual course details for Group A.",
                            CourseName = "African Studies - Chieftancy and Development",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("59c320f0-4ab1-4f43-bd8a-c4cfa2b687d7"),
                            CourseCode = "AFST243",
                            CourseCredits = 1,
                            CourseDescription = "African Studies Course - Placeholder. Replace with actual course details for Group B.",
                            CourseName = "African Studies - Group B",
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d")
                        },
                        new
                        {
                            CourseID = new Guid("1b84cd21-2550-41d3-b3d4-7a985e71d1ea"),
                            CourseCode = "STAT282",
                            CourseCredits = 3,
                            CourseDescription = "This course introduces fundamental concepts in statistics.",
                            CourseName = "Introduction to Statistics",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729")
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.CourseStudent", b =>
                {
                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("RegistrationPeriodID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseID", "StudentID");

                    b.HasIndex("RegistrationPeriodID");

                    b.HasIndex("StudentID");

                    b.ToTable("CourseStudents");

                    b.HasData(
                        new
                        {
                            CourseID = new Guid("156ae504-b1fb-4981-af79-8a70f8b19bfa"),
                            StudentID = "222CS01000694",
                            RegistrationPeriodID = new Guid("8f028ff7-eda7-4bd6-b9dc-f6d33c4972fc")
                        },
                        new
                        {
                            CourseID = new Guid("baa9502b-bf06-451c-a53b-357973a88fd1"),
                            StudentID = "222CS01000694",
                            RegistrationPeriodID = new Guid("8f028ff7-eda7-4bd6-b9dc-f6d33c4972fc")
                        },
                        new
                        {
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            StudentID = "222CS01000694",
                            RegistrationPeriodID = new Guid("8f028ff7-eda7-4bd6-b9dc-f6d33c4972fc")
                        },
                        new
                        {
                            CourseID = new Guid("2722aef8-8ead-4d5f-8841-e905e4f8dc63"),
                            StudentID = "222CS01000694",
                            RegistrationPeriodID = new Guid("8f028ff7-eda7-4bd6-b9dc-f6d33c4972fc")
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.CourseTimeSlot", b =>
                {
                    b.Property<Guid>("CourseTimeSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("LecturerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("CourseTimeSlotID");

                    b.HasIndex("CourseID");

                    b.HasIndex("LecturerID");

                    b.ToTable("CourseTimeSlot");

                    b.HasData(
                        new
                        {
                            CourseTimeSlotID = new Guid("c4511bca-0142-4b03-b8a2-00f4e8d1aa8c"),
                            CourseID = new Guid("156ae504-b1fb-4981-af79-8a70f8b19bfa"),
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            LecturerID = "L0001",
                            Location = 0,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("cb1f8dad-4cb3-42c8-90e4-2cb66625f972"),
                            CourseID = new Guid("156ae504-b1fb-4981-af79-8a70f8b19bfa"),
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            LecturerID = "L0001",
                            Location = 4,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("7378abfb-d932-428b-ab84-87a32d6de75e"),
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 15, 50, 0, 0),
                            LecturerID = "L0001",
                            Location = 4,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("f03d7e47-92dc-4b1b-a8fd-f68c526e802a"),
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            LecturerID = "L0001",
                            Location = 4,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("bab91284-ec26-439e-9852-dbd76bd594e4"),
                            CourseID = new Guid("2722aef8-8ead-4d5f-8841-e905e4f8dc63"),
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            LecturerID = "L0002",
                            Location = 5,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("d2d43c71-e423-4d42-b605-dcd177065b9a"),
                            CourseID = new Guid("2722aef8-8ead-4d5f-8841-e905e4f8dc63"),
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            LecturerID = "L0001",
                            Location = 5,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("61622c25-0434-4fc0-a776-ca57195a0a2e"),
                            CourseID = new Guid("baa9502b-bf06-451c-a53b-357973a88fd1"),
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            LecturerID = "L0002",
                            Location = 3,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            CourseTimeSlotID = new Guid("12acd859-70a5-4a36-af06-afe44e9fe216"),
                            CourseID = new Guid("baa9502b-bf06-451c-a53b-357973a88fd1"),
                            DayOfWeek = 5,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            LecturerID = "L0002",
                            Location = 5,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BirthYear")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DepartmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequiredCredits")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.HasIndex("FacultyID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Computer Science",
                            DepartmentName = "Computer Science",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("28f5c222-97a9-4ff5-9cec-b2f3a0ed87d6"),
                            BirthYear = new DateTimeOffset(new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Information Technology",
                            DepartmentName = "Information Technology",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("1d5236cf-71a2-429d-9f8c-0428b5b19412"),
                            BirthYear = new DateTimeOffset(new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Business Information Systems",
                            DepartmentName = "Business Information Systems",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("57afdfb7-7300-440d-9967-2cd9b09f9c4c"),
                            BirthYear = new DateTimeOffset(new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Biomedical Engineering",
                            DepartmentName = "Biomedical Engineering",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("29433adc-57c6-45a7-a896-9bb40691e125"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Mathematics with Statistics",
                            DepartmentName = "Mathematics with Statistics",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("8a25d090-c0bc-4477-9c80-80a0977da378"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Agribusiness",
                            DepartmentName = "Agribusiness",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("8c1cebc3-4f13-4703-801b-5f19e7f72468"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Agriculture",
                            DepartmentName = "Agriculture",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("0b83411d-1567-4463-a5f0-8fa87a420874"),
                            BirthYear = new DateTimeOffset(new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Theological Studies",
                            DepartmentName = "Theological Studies",
                            FacultyID = new Guid("7e269486-1dd1-44bc-88f8-7ab8f9f65b4e"),
                            RequiredCredits = 90
                        },
                        new
                        {
                            DepartmentID = new Guid("e1c4aec2-235e-4165-8f9a-3f3201bfa6eb"),
                            BirthYear = new DateTimeOffset(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Communication Studies",
                            DepartmentName = "Communication Studies",
                            FacultyID = new Guid("7e269486-1dd1-44bc-88f8-7ab8f9f65b4e"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("3ee35a62-d8d4-47b7-a8f2-6235971c1c4b"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Development Studies",
                            DepartmentName = "Development Studies",
                            FacultyID = new Guid("7e269486-1dd1-44bc-88f8-7ab8f9f65b4e"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("6cd46428-0391-458f-b695-a4a4ec9dca77"),
                            BirthYear = new DateTimeOffset(new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Nursing",
                            DepartmentName = "Nursing",
                            FacultyID = new Guid("1203f7e4-8551-4f3e-a0af-43ee8528cd14"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("68c4a0c1-69a4-442b-9c3c-32a346a9ce52"),
                            BirthYear = new DateTimeOffset(new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Midwifery",
                            DepartmentName = "Midwifery",
                            FacultyID = new Guid("1203f7e4-8551-4f3e-a0af-43ee8528cd14"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("fc24c1cb-4b35-4171-85be-8e675d5e9685"),
                            BirthYear = new DateTimeOffset(new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of Mental Health Nursing",
                            DepartmentName = "Mental Health Nursing",
                            FacultyID = new Guid("1203f7e4-8551-4f3e-a0af-43ee8528cd14"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("4d994703-c68f-4c0b-b53d-95f019a14c35"),
                            BirthYear = new DateTimeOffset(new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BEd English Language",
                            DepartmentName = "BEd English Language",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("f9a7cdcc-ea5a-42be-8937-23ac341175f7"),
                            BirthYear = new DateTimeOffset(new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BEd Information Technology",
                            DepartmentName = "BEd Information Technology",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("390eec3a-93de-4f28-98e5-d5bcb79ed800"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BEd Social Studies",
                            DepartmentName = "BEd Social Studies",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("88d075bb-6051-4960-b7f0-9cc4731fc6d1"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BEd Music",
                            DepartmentName = "BEd Music",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("fa3db516-1606-4537-b611-e2deea201b24"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BEd Accounting",
                            DepartmentName = "BEd Accounting",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("58bf33ce-8342-4e04-9b50-0c8511bb8dc4"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BEd Management",
                            DepartmentName = "BEd Management",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("52f69ff4-2719-4ed0-8de3-355737fabcaa"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Diploma in Music Program",
                            DepartmentName = "Diploma in Music",
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            RequiredCredits = 60
                        },
                        new
                        {
                            DepartmentID = new Guid("c1e22698-ee7e-45eb-8c4c-85e603306812"),
                            BirthYear = new DateTimeOffset(new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BBA Accounting",
                            DepartmentName = "BBA Accounting",
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("dc1b48f1-f16e-4012-85c4-5fdd1089151f"),
                            BirthYear = new DateTimeOffset(new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BBA Banking and Finance",
                            DepartmentName = "BBA Banking and Finance",
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("b3a96381-e9d9-4c24-86fc-0d5cf61d41a7"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BBA Human Resource Management",
                            DepartmentName = "BBA Human Resource Management",
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("91df7bae-8883-43bb-ad40-aa5c27a948a6"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BBA Management",
                            DepartmentName = "BBA Management",
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("11133185-3d7e-4c32-8ee5-0680ce2b1894"),
                            BirthYear = new DateTimeOffset(new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Department of BBA Marketing",
                            DepartmentName = "BBA Marketing",
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            RequiredCredits = 120
                        },
                        new
                        {
                            DepartmentID = new Guid("55c67c5c-28fa-4660-8e3b-c012d0df6499"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Diploma in Business Administration Program",
                            DepartmentName = "Diploma in Business Administration",
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            RequiredCredits = 60
                        },
                        new
                        {
                            DepartmentID = new Guid("3168cd6d-7493-4ec7-af43-6fedc88f9f46"),
                            BirthYear = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "PhD Program in Business Administration",
                            DepartmentName = "PhD Business Administration",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 45
                        },
                        new
                        {
                            DepartmentID = new Guid("77d0a3df-783c-460e-a940-51037992cb40"),
                            BirthYear = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "PhD Program in Computer Science",
                            DepartmentName = "PhD Computer Science",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 45
                        },
                        new
                        {
                            DepartmentID = new Guid("f7362026-a241-4b75-9fa0-a70255ebcf94"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "MSc/MPhil Program in Computer Science",
                            DepartmentName = "MSc/MPhil Computer Science",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 30
                        },
                        new
                        {
                            DepartmentID = new Guid("5b398d02-7373-4d66-9a92-c68385659c91"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "MBA Program in Accounting",
                            DepartmentName = "MBA Accounting",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 40
                        },
                        new
                        {
                            DepartmentID = new Guid("c3e84797-7d32-482e-8654-8de6f4cb96ab"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "MBA Program in Strategic Management",
                            DepartmentName = "MBA Strategic Management",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 40
                        },
                        new
                        {
                            DepartmentID = new Guid("56bbf7ff-de46-4582-a091-8dc959454af4"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "MBA Program in Banking & Finance",
                            DepartmentName = "MBA Banking & Finance",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 40
                        },
                        new
                        {
                            DepartmentID = new Guid("6053a136-3975-45d2-a56d-6fa31b3e684e"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "MEd/MPhil Program in Curriculum & Instruction",
                            DepartmentName = "MEd/MPhil Curriculum & Instruction",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 30
                        },
                        new
                        {
                            DepartmentID = new Guid("21bb77eb-d66f-48c3-897e-e3f10aaf79c7"),
                            BirthYear = new DateTimeOffset(new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "MEd/MPhil Program in Educational Administration & Leadership",
                            DepartmentName = "MEd/MPhil Educational Administration & Leadership",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 30
                        },
                        new
                        {
                            DepartmentID = new Guid("7759ceb1-f467-49ba-88a4-07bf83393675"),
                            BirthYear = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "Postgraduate Diploma in Education Program",
                            DepartmentName = "Postgraduate Diploma in Education",
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            RequiredCredits = 30
                        },
                        new
                        {
                            DepartmentID = new Guid("1a775d93-ca09-4496-917e-4f83b4565d8d"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DepartmentDescription = "University Wide General Education Courses",
                            DepartmentName = "General Education",
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            RequiredCredits = 30
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.EvaluationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("EvaluationPeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicYear = "2024-2025",
                            Description = "September 2024 Evaluation",
                            EndDate = new DateTimeOffset(new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = false,
                            Semester = 0,
                            StartDate = new DateTimeOffset(new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            AcademicYear = "2024-2025",
                            Description = "January 2025 Evaluation",
                            EndDate = new DateTimeOffset(new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActive = true,
                            Semester = 1,
                            StartDate = new DateTimeOffset(new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.EvaluationQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PossibleAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EvaluationQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            DisplayOrder = 1,
                            IsActive = true,
                            PossibleAnswers = "[\"1\", \"2\", \"3\", \"4\", \"5\"]",
                            QuestionText = "How would you rate the teaching methods used in this course?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            DisplayOrder = 2,
                            IsActive = true,
                            PossibleAnswers = "[\"1\", \"2\", \"3\", \"4\", \"5\"]",
                            QuestionText = "Were the course materials (handouts, slides, online resources) helpful for your learning?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            DisplayOrder = 3,
                            IsActive = true,
                            PossibleAnswers = "[\"1\", \"2\", \"3\", \"4\", \"5\"]",
                            QuestionText = "How effective was the lecturer in explaining difficult concepts?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 4,
                            Category = 3,
                            DisplayOrder = 4,
                            IsActive = true,
                            PossibleAnswers = "[\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"]",
                            QuestionText = "The lecturer encouraged student participation and questions.",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 5,
                            Category = 4,
                            DisplayOrder = 5,
                            IsActive = true,
                            PossibleAnswers = "[\"Poorly\", \"Fairly\", \"Moderately\", \"Well\", \"Very Well\"]",
                            QuestionText = "How well did the lecturer manage the class time?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 6,
                            Category = 5,
                            DisplayOrder = 6,
                            IsActive = true,
                            PossibleAnswers = "[\"1\", \"2\", \"3\", \"4\", \"5\"]",
                            QuestionText = "How knowledgeable was the lecturer in the subject matter?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 7,
                            Category = 5,
                            DisplayOrder = 7,
                            IsActive = true,
                            PossibleAnswers = "[\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"]",
                            QuestionText = "The lecturer demonstrated a clear understanding of the course content.",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 8,
                            Category = 6,
                            DisplayOrder = 8,
                            IsActive = true,
                            PossibleAnswers = "[\"1\", \"2\", \"3\", \"4\", \"5\"]",
                            QuestionText = "How well was the course content organized?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 9,
                            Category = 7,
                            DisplayOrder = 9,
                            IsActive = true,
                            PossibleAnswers = "[\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"]",
                            QuestionText = "The learning objectives of the course were clearly communicated.",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 10,
                            Category = 8,
                            DisplayOrder = 10,
                            IsActive = true,
                            PossibleAnswers = "[\"1\", \"2\", \"3\", \"4\", \"5\"]",
                            QuestionText = "How fair and relevant were the assessment methods used in this course?",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 11,
                            Category = 9,
                            DisplayOrder = 11,
                            IsActive = true,
                            PossibleAnswers = "[\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"]",
                            QuestionText = "The feedback provided on assignments was helpful for my learning.",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 12,
                            Category = 10,
                            DisplayOrder = 12,
                            IsActive = true,
                            PossibleAnswers = "[]",
                            QuestionText = "What are the strengths of this lecturer/course?",
                            QuestionType = 2
                        },
                        new
                        {
                            Id = 13,
                            Category = 10,
                            DisplayOrder = 13,
                            IsActive = true,
                            PossibleAnswers = "[]",
                            QuestionText = "What are some areas for improvement for this lecturer/course?",
                            QuestionType = 2
                        },
                        new
                        {
                            Id = 14,
                            Category = 11,
                            DisplayOrder = 14,
                            IsActive = true,
                            PossibleAnswers = "[\"Very Dissatisfied\", \"Dissatisfied\", \"Neutral\", \"Satisfied\", \"Very Satisfied\"]",
                            QuestionText = "Overall, how satisfied were you with this course and lecturer?",
                            QuestionType = 1
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.EvaluationResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationQuestionID")
                        .HasColumnType("int");

                    b.Property<int>("LecturerEvaluationID")
                        .HasColumnType("int");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("SelectedOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextResponse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationQuestionID");

                    b.HasIndex("LecturerEvaluationID");

                    b.ToTable("EvaluationResponses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EvaluationQuestionID = 1,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "4"
                        },
                        new
                        {
                            Id = 2,
                            EvaluationQuestionID = 2,
                            LecturerEvaluationID = 1,
                            RatingValue = 5,
                            SelectedOption = "5"
                        },
                        new
                        {
                            Id = 3,
                            EvaluationQuestionID = 3,
                            LecturerEvaluationID = 1,
                            RatingValue = 5,
                            SelectedOption = "5"
                        },
                        new
                        {
                            Id = 4,
                            EvaluationQuestionID = 4,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "Agree"
                        },
                        new
                        {
                            Id = 5,
                            EvaluationQuestionID = 5,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "Well"
                        },
                        new
                        {
                            Id = 6,
                            EvaluationQuestionID = 6,
                            LecturerEvaluationID = 1,
                            RatingValue = 5,
                            SelectedOption = "5"
                        },
                        new
                        {
                            Id = 7,
                            EvaluationQuestionID = 7,
                            LecturerEvaluationID = 1,
                            RatingValue = 5,
                            SelectedOption = "Strongly Agree"
                        },
                        new
                        {
                            Id = 8,
                            EvaluationQuestionID = 8,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "4"
                        },
                        new
                        {
                            Id = 9,
                            EvaluationQuestionID = 9,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "Agree"
                        },
                        new
                        {
                            Id = 10,
                            EvaluationQuestionID = 10,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "4"
                        },
                        new
                        {
                            Id = 11,
                            EvaluationQuestionID = 11,
                            LecturerEvaluationID = 1,
                            RatingValue = 3,
                            SelectedOption = "Neutral"
                        },
                        new
                        {
                            Id = 12,
                            EvaluationQuestionID = 12,
                            LecturerEvaluationID = 1,
                            TextResponse = "The lecturer is very enthusiastic and knowledgeable. The course content was relevant and up-to-date."
                        },
                        new
                        {
                            Id = 13,
                            EvaluationQuestionID = 13,
                            LecturerEvaluationID = 1,
                            TextResponse = "More practical examples and real-world case studies could be incorporated."
                        },
                        new
                        {
                            Id = 14,
                            EvaluationQuestionID = 14,
                            LecturerEvaluationID = 1,
                            RatingValue = 4,
                            SelectedOption = "Satisfied"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Faculty", b =>
                {
                    b.Property<Guid>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BirthYear")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FacultyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyID");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            FacultyID = new Guid("98fee642-2853-43b3-8cfc-da9b4a34063a"),
                            BirthYear = new DateTimeOffset(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FacultyDescription = "Science Faculty",
                            FacultyName = "Faculty of Science"
                        },
                        new
                        {
                            FacultyID = new Guid("7e269486-1dd1-44bc-88f8-7ab8f9f65b4e"),
                            BirthYear = new DateTimeOffset(new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FacultyDescription = "Arts and Social Sciences Faculty",
                            FacultyName = "Faculty of Arts and Social Sciences"
                        },
                        new
                        {
                            FacultyID = new Guid("1203f7e4-8551-4f3e-a0af-43ee8528cd14"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FacultyDescription = "School of Nursing and Midwifery",
                            FacultyName = "School of Nursing and Midwifery"
                        },
                        new
                        {
                            FacultyID = new Guid("556fc5aa-0a4f-4a83-a368-80ebac6d6779"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FacultyDescription = "School of Education",
                            FacultyName = "School of Education"
                        },
                        new
                        {
                            FacultyID = new Guid("9dcbecbf-d5b2-42b3-a059-8095d46196f6"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FacultyDescription = "School of Business",
                            FacultyName = "School of Business"
                        },
                        new
                        {
                            FacultyID = new Guid("db648eb3-9caa-4964-8b77-e43ccf4a4d86"),
                            BirthYear = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FacultyDescription = "School of Graduate Studies",
                            FacultyName = "School of Graduate Studies"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.FeeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FeeItemCategory")
                        .HasColumnType("int");

                    b.Property<Guid>("FinancialRecordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FinancialRecordID");

                    b.ToTable("FeeItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 4500m,
                            Description = "Tuition Fee - September 2023",
                            FeeItemCategory = 0,
                            FinancialRecordID = new Guid("4ddb0207-3234-4dc8-9a81-866cecabb283"),
                            PaymentStatus = 0,
                            isRequired = true
                        },
                        new
                        {
                            Id = 2,
                            Amount = 300m,
                            Description = "Dues - September 2023",
                            FeeItemCategory = 4,
                            FinancialRecordID = new Guid("4ddb0207-3234-4dc8-9a81-866cecabb283"),
                            PaymentStatus = 0,
                            isRequired = true
                        },
                        new
                        {
                            Id = 3,
                            Amount = 5000m,
                            Description = "Tuition Fee - January 2024",
                            FeeItemCategory = 0,
                            FinancialRecordID = new Guid("e992535c-c9c4-4c01-9af9-91e7eec5e6d5"),
                            PaymentStatus = 0,
                            isRequired = true
                        },
                        new
                        {
                            Id = 4,
                            Amount = 200m,
                            Description = "Library Fee - January 2024",
                            FeeItemCategory = 1,
                            FinancialRecordID = new Guid("e992535c-c9c4-4c01-9af9-91e7eec5e6d5"),
                            PaymentStatus = 0,
                            isRequired = false
                        },
                        new
                        {
                            Id = 5,
                            Amount = 5200m,
                            Description = "Tuition Fee - September 2024",
                            FeeItemCategory = 0,
                            FinancialRecordID = new Guid("0dc3ffc7-01f2-4247-a423-2ec8ee79e076"),
                            PaymentStatus = 0,
                            isRequired = true
                        },
                        new
                        {
                            Id = 6,
                            Amount = 300m,
                            Description = "Dues - September 2024",
                            FeeItemCategory = 4,
                            FinancialRecordID = new Guid("0dc3ffc7-01f2-4247-a423-2ec8ee79e076"),
                            PaymentStatus = 0,
                            isRequired = true
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.FinancialRecord", b =>
                {
                    b.Property<Guid>("FinancialRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("OutstandingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<decimal>("TotalFees")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FinancialRecordID");

                    b.HasIndex("StudentID");

                    b.ToTable("FinancialRecords");

                    b.HasData(
                        new
                        {
                            FinancialRecordID = new Guid("4ddb0207-3234-4dc8-9a81-866cecabb283"),
                            AcademicYear = "2023-2024",
                            AmountPaid = 4800m,
                            LastUpdated = new DateTimeOffset(new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            OutstandingBalance = 0m,
                            Semester = 0,
                            StudentID = "222CS01000694",
                            TotalFees = 4800m
                        },
                        new
                        {
                            FinancialRecordID = new Guid("e992535c-c9c4-4c01-9af9-91e7eec5e6d5"),
                            AcademicYear = "2023-2024",
                            AmountPaid = 5000m,
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            OutstandingBalance = 200m,
                            Semester = 1,
                            StudentID = "222CS01000694",
                            TotalFees = 5200m
                        },
                        new
                        {
                            FinancialRecordID = new Guid("0dc3ffc7-01f2-4247-a423-2ec8ee79e076"),
                            AcademicYear = "2024-2025",
                            AmountPaid = 6000m,
                            LastUpdated = new DateTimeOffset(new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            OutstandingBalance = -500m,
                            Semester = 0,
                            StudentID = "222CS01000694",
                            TotalFees = 5500m
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Grade", b =>
                {
                    b.Property<Guid>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateAwarded")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GradeLetter")
                        .HasColumnType("int");

                    b.Property<double>("GradePoints")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<Guid>("SemesterRecordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeID");

                    b.HasIndex("CourseID");

                    b.HasIndex("SemesterRecordID");

                    b.HasIndex("StudentID");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeID = new Guid("31fa5b0f-27de-4210-b5ab-000b9321ac03"),
                            CourseID = new Guid("28a3020d-c97f-4f0b-a559-b59cfe2a6d3c"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("4ce939f4-5bb5-41de-8b9e-9170f2a96a7e"),
                            CourseID = new Guid("52d2190e-c7a3-4f7b-ab3b-731e82216d02"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 5,
                            GradePoints = 2.6699999999999999,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("1aeae647-2f88-48fa-9425-994433a4ff49"),
                            CourseID = new Guid("0badf6bd-77ef-4c6d-a568-912b57daf884"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 5,
                            GradePoints = 2.6699999999999999,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("aff22d54-2a43-4f3f-849b-ddc2bddeabc7"),
                            CourseID = new Guid("1897059a-c3fc-4cb3-a6dc-0aa23f62fc4d"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 1,
                            GradePoints = 4.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("e3bc43c7-13e5-44d9-b6b8-c155c440fa81"),
                            CourseID = new Guid("20a3f858-958e-42b0-b841-e907b592ce0e"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("34436c48-472f-4e0e-85e9-8909d7d0604e"),
                            CourseID = new Guid("60efbe37-61c0-4dc0-93ef-5d20358e8a30"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 7,
                            GradePoints = 2.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("164d67bf-fde3-4896-8cdb-979f3ae0ef9f"),
                            CourseID = new Guid("1a46ac1d-c607-4225-9002-e14a4c1e3363"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 12,
                            GradePoints = 0.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("7e0846b9-766f-4844-8737-ac1bf3f360f6"),
                            CourseID = new Guid("2274f76c-d939-47c9-89c2-8284728f2c7a"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 6,
                            GradePoints = 2.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("ec85f9e9-444a-4e21-8da3-379dec3b77ab"),
                            CourseID = new Guid("87097a1a-aca0-42f0-8ce3-65995891a0ea"),
                            DateAwarded = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 2,
                            GradePoints = 3.6699999999999999,
                            Semester = 0,
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("7fbbed7b-a438-4176-af8e-97c2aadbb795"),
                            CourseID = new Guid("13c34157-f376-4a31-9391-7fdd4d7fbdb7"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 6,
                            GradePoints = 2.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("d7153f8e-f4f4-4222-a320-244afd8e1481"),
                            CourseID = new Guid("8041883e-8a68-42e0-8213-3f8c2669c73e"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 5,
                            GradePoints = 2.6699999999999999,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("f1d40ac0-e6e3-41d0-a4a0-ef4f689713da"),
                            CourseID = new Guid("f29033fa-ffd0-4c70-8726-a4eefa5f72ef"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 7,
                            GradePoints = 2.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("25f208b9-8830-47ac-83e4-9e5df3fd7d3b"),
                            CourseID = new Guid("babc17e9-4b27-4ee1-8c79-5c39179eeb68"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("52f8242e-867c-4a0d-9aa5-c09cc4a135a5"),
                            CourseID = new Guid("13a87b42-12ce-4cbc-8011-fc2c792f29e5"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 10,
                            GradePoints = 1.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("794d6346-8f82-4aef-94a6-fab441e06a40"),
                            CourseID = new Guid("20a3f858-958e-42b0-b841-e907b592ce0e"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 11,
                            GradePoints = 0.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("d1b0c3c2-bbac-472a-afe6-8fda756757a2"),
                            CourseID = new Guid("62330761-ad34-4969-96c7-47eb3c70f552"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 5,
                            GradePoints = 2.6699999999999999,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("32cecb7f-6ab3-41c4-b5da-71e50f39ca2d"),
                            CourseID = new Guid("23665740-f571-4a6e-b3b4-8cdcb719d2fc"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 4,
                            GradePoints = 3.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("4d4fabb7-7215-4e34-b5b5-7ad55cb95581"),
                            CourseID = new Guid("0922f512-59fd-43c4-9d36-cdd18fccfb13"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 4,
                            GradePoints = 3.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("d45566a9-f660-4a23-8cb3-e231e2321372"),
                            CourseID = new Guid("564d341f-7ccf-4eb4-b250-f32d6cb1c633"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 7,
                            GradePoints = 2.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("2ce9ffdf-d92e-478d-91fc-1cb6caadd768"),
                            CourseID = new Guid("1f1f83d3-6271-4ac5-964f-2805ae049fa1"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 4,
                            GradePoints = 3.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("91ac1fd4-b80b-41d8-84de-59cda11042f2"),
                            CourseID = new Guid("4459b5db-fac2-4188-96ac-cf2d4e562f14"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("81b86f8d-ec07-4878-908b-f8bdfcd3fb7f"),
                            CourseID = new Guid("7e542e0d-713f-437f-8a1d-0133a004b722"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 2,
                            GradePoints = 3.6699999999999999,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("81dea6fe-6af1-47a7-9af0-02b454ab1bc8"),
                            CourseID = new Guid("520f8d39-11bd-4e16-9add-79661a45985e"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 11,
                            GradePoints = 0.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("fccd268a-8152-42fc-8f0a-e895f4adbab2"),
                            CourseID = new Guid("fc6943fa-c904-4b85-9232-eba8c33c485e"),
                            DateAwarded = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 4,
                            GradePoints = 3.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("dca54717-858d-49db-8d78-d1563131d543"),
                            CourseID = new Guid("59c320f0-4ab1-4f43-bd8a-c4cfa2b687d7"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 2,
                            GradePoints = 3.6699999999999999,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("2b067db8-5e47-4550-93b0-8cc6328df935"),
                            CourseID = new Guid("eeb2ed1f-1b0f-4a3c-bad3-aab3a35a4796"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 5,
                            GradePoints = 2.6699999999999999,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("7ee726fd-02d6-4713-9a8c-f94054c1c930"),
                            CourseID = new Guid("012bdf77-0b02-4d88-8da0-105ba9f1f829"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 1,
                            GradePoints = 4.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("2249e66e-3169-43b6-ae10-f779b3b92dcb"),
                            CourseID = new Guid("1b006764-b19a-402b-a17a-f9a12d5f4b76"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("81878429-4c91-486d-9ecd-bd85a1a941f0"),
                            CourseID = new Guid("32ff3746-075f-4a74-bdaa-ed776cf854ff"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 7,
                            GradePoints = 2.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("99d3d6e0-f6d8-4d0a-8185-b76b27f72f64"),
                            CourseID = new Guid("095a4f84-f388-4a49-9994-43eb52ec18e0"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 1,
                            GradePoints = 4.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("9ffc646c-c656-474a-8e12-a57f31dbb96a"),
                            CourseID = new Guid("1b84cd21-2550-41d3-b3d4-7a985e71d1ea"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 6,
                            GradePoints = 2.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("2f079431-e7d2-4892-82e5-65d84e7fa122"),
                            CourseID = new Guid("25a7e084-5ce1-48e8-bca7-9cada78ffa26"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 1,
                            GradePoints = 4.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("09581fca-33c4-4ea7-aeb2-adc56c46d528"),
                            CourseID = new Guid("ab899bae-a14b-4a18-8ff5-b70be8405acc"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 4,
                            GradePoints = 3.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("358aba61-e224-4ed2-b9a6-18002f76aaba"),
                            CourseID = new Guid("b8391957-9ad4-4134-8b65-86d891b57d07"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("2e6a3b9a-f62a-4eb6-8c46-f478aebe9e14"),
                            CourseID = new Guid("e023c552-f2a5-48a5-88d6-f13f55b6d5bb"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 7,
                            GradePoints = 2.0,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("dc8d8675-9c65-42bb-87ff-ce544a7d4e19"),
                            CourseID = new Guid("fb4cf15a-f794-4b59-bc78-3be63b7b8310"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 2,
                            GradePoints = 3.6699999999999999,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("191bcd15-46e5-477a-9d17-1a4dbce579ec"),
                            CourseID = new Guid("a793836a-dd04-40e6-a610-04c45c411837"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 6,
                            GradePoints = 2.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("bb5d18e2-a6de-4b94-9e44-4aede8a142f6"),
                            CourseID = new Guid("fae9d171-eecf-4b51-87c6-08e9b8bb3b21"),
                            DateAwarded = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 0,
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("1ae71585-3568-463f-8d97-aede7670a92b"),
                            CourseID = new Guid("c0fff6d8-640b-44a4-ba64-9c550052ef80"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 1,
                            GradePoints = 4.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("737c38f3-e6aa-4565-aa4e-b24ce883a98a"),
                            CourseID = new Guid("435500b2-b00d-4a63-8571-a77f5aadc28d"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 2,
                            GradePoints = 3.6699999999999999,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("5a732681-f35f-4401-b077-5cb1954bbbde"),
                            CourseID = new Guid("20acdf30-8b86-4b77-921d-02b0bc9ee0d5"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 2,
                            GradePoints = 3.6699999999999999,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("c848bd46-afca-4c03-92b5-7e4b89d4c368"),
                            CourseID = new Guid("8f5abb46-f621-4b96-9e1b-e6e84aba4b41"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("d6add265-4d8d-4d75-9387-1d93b472bdf8"),
                            CourseID = new Guid("064f2d40-55de-4ff5-a56c-c57c1dd562f4"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("e47ea3c7-c15d-449c-b7df-48ef91767500"),
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 10,
                            GradePoints = 1.0,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        },
                        new
                        {
                            GradeID = new Guid("83fb3bec-bd4e-4d18-a9dd-78e377b78b09"),
                            CourseID = new Guid("f489fc5f-0029-4a95-9fa9-ec6d63a33e0c"),
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeLetter = 3,
                            GradePoints = 3.3300000000000001,
                            Semester = 1,
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            StudentID = "222CS01000694",
                            isCompleted = true
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("FinancialRecordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("FinancialRecordID");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("StudentID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.InvoiceLineItem", b =>
                {
                    b.Property<int>("InvoiceLineItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceLineItemID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeeItemID")
                        .HasColumnType("int");

                    b.Property<Guid>("InvoiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceLineItemID");

                    b.HasIndex("FeeItemID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceLineItems");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Lecturer", b =>
                {
                    b.Property<string>("LecturerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Credentials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LecturerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LecturerID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            LecturerID = "L0001",
                            Credentials = "Masters",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729"),
                            Gender = 0,
                            LecturerEmail = "masare@example.com",
                            LecturerFirstName = "Michael",
                            LecturerLastName = "Asare",
                            Office = "Room 101"
                        },
                        new
                        {
                            LecturerID = "L0002",
                            Credentials = "PhD",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729"),
                            Gender = 0,
                            LecturerEmail = "papa@example.com",
                            LecturerFirstName = "Papa",
                            LecturerLastName = "Prince",
                            Office = "Room 102"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LecturerCourse", b =>
                {
                    b.Property<string>("LecturerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("LecturerID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("LecturerCourse");

                    b.HasData(
                        new
                        {
                            LecturerID = "L0001",
                            CourseID = new Guid("156ae504-b1fb-4981-af79-8a70f8b19bfa"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0002",
                            CourseID = new Guid("156ae504-b1fb-4981-af79-8a70f8b19bfa"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0002",
                            CourseID = new Guid("baa9502b-bf06-451c-a53b-357973a88fd1"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0001",
                            CourseID = new Guid("baa9502b-bf06-451c-a53b-357973a88fd1"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0001",
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0002",
                            CourseID = new Guid("96d16898-bce0-4f23-9ab1-9507e904b293"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0002",
                            CourseID = new Guid("2722aef8-8ead-4d5f-8841-e905e4f8dc63"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        },
                        new
                        {
                            LecturerID = "L0001",
                            CourseID = new Guid("2722aef8-8ead-4d5f-8841-e905e4f8dc63"),
                            AcademicYear = "2024-2025",
                            Semester = 0
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LecturerEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EvaluationPeriodID")
                        .HasColumnType("int");

                    b.Property<string>("LecturerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("SubmissionDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("EvaluationPeriodID");

                    b.HasIndex("LecturerID");

                    b.ToTable("LecturerEvaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Great course!",
                            CourseID = new Guid("8fd7171a-8a59-4208-aabb-1c0699259052"),
                            EvaluationPeriodID = 1,
                            LecturerID = "L0001",
                            SubmissionDate = new DateTimeOffset(new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LibraryResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DigitalAccessLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LibraryResources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Thomas H. Cormen",
                            AvailableCopies = 8,
                            Category = "Computer Science",
                            Description = "Comprehensive guide to algorithms",
                            DigitalAccessLink = "",
                            Edition = "3rd",
                            ISBN = "9780262033848",
                            IsDigital = false,
                            Location = "Library Section A",
                            Publisher = "MIT Press",
                            ResourceType = 0,
                            Title = "Introduction to Algorithms",
                            TotalCopies = 10,
                            YearPublished = 2009
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentID");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Welcome to the new semester!",
                            NotificationType = 1,
                            Priority = 1,
                            RedirectUrl = "",
                            StudentID = "222CS01000694",
                            Title = "Welcome"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FinancialRecordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.HasIndex("FinancialRecordID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentID = new Guid("b0a81332-d5d4-4dad-88cc-a7d888a95b0c"),
                            Amount = 2000m,
                            FinancialRecordID = new Guid("4ddb0207-3234-4dc8-9a81-866cecabb283"),
                            PaymentDate = new DateTimeOffset(new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 1,
                            PaymentStatus = 2,
                            ReferenceNumber = "a4a8ea22"
                        },
                        new
                        {
                            PaymentID = new Guid("83a559bf-c652-4c36-a89d-79af8a448180"),
                            Amount = 2800m,
                            FinancialRecordID = new Guid("4ddb0207-3234-4dc8-9a81-866cecabb283"),
                            PaymentDate = new DateTimeOffset(new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 3,
                            PaymentStatus = 2,
                            ReferenceNumber = "f939355e"
                        },
                        new
                        {
                            PaymentID = new Guid("166bc201-59d7-4544-9625-6ac7d63a636a"),
                            Amount = 3000m,
                            FinancialRecordID = new Guid("e992535c-c9c4-4c01-9af9-91e7eec5e6d5"),
                            PaymentDate = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 1,
                            PaymentStatus = 2,
                            ReferenceNumber = "fe526553"
                        },
                        new
                        {
                            PaymentID = new Guid("6c1c409e-2c89-42be-b8b4-8162c4fa0d91"),
                            Amount = 2000m,
                            FinancialRecordID = new Guid("e992535c-c9c4-4c01-9af9-91e7eec5e6d5"),
                            PaymentDate = new DateTimeOffset(new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 1,
                            PaymentStatus = 2,
                            ReferenceNumber = "c8d5b814"
                        },
                        new
                        {
                            PaymentID = new Guid("99d0d537-8abf-4a3e-a4a3-2987d7e7b207"),
                            Amount = 6000m,
                            FinancialRecordID = new Guid("0dc3ffc7-01f2-4247-a423-2ec8ee79e076"),
                            PaymentDate = new DateTimeOffset(new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 1,
                            PaymentStatus = 2,
                            ReferenceNumber = "6c9eed80"
                        },
                        new
                        {
                            PaymentID = new Guid("34b9776b-c992-47f2-ab99-4601939e3bbb"),
                            Amount = 100m,
                            FinancialRecordID = new Guid("0dc3ffc7-01f2-4247-a423-2ec8ee79e076"),
                            PaymentDate = new DateTimeOffset(new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 5,
                            PaymentStatus = 2,
                            ReferenceNumber = "2177610b"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.PaymentGatewayTransaction", b =>
                {
                    b.Property<Guid>("GatewayTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountProcessed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GatewayTransactionReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawResponseData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GatewayTransactionID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("GatewayName", "GatewayTransactionReference")
                        .IsUnique();

                    b.ToTable("PaymentGatewayTransactions");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.PaymentReminder", b =>
                {
                    b.Property<Guid>("ReminderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FeeItemID")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinancialRecordID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ReminderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReminderType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("ReminderID");

                    b.HasIndex("FeeItemID");

                    b.HasIndex("FinancialRecordID");

                    b.HasIndex("StudentID");

                    b.HasIndex("Status", "ReminderDate");

                    b.ToTable("PaymentReminders");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.RegistrationPeriod", b =>
                {
                    b.Property<Guid>("RegistrationPeriodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowCourseAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowCourseDrop")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LateRegistrationEnd")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LateRegistrationFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LateRegistrationStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RegistrationPeriodID");

                    b.ToTable("RegistrationPeriods");

                    b.HasData(
                        new
                        {
                            RegistrationPeriodID = new Guid("8f028ff7-eda7-4bd6-b9dc-f6d33c4972fc"),
                            AcademicYear = "2024-2025",
                            AllowCourseAdd = true,
                            AllowCourseDrop = true,
                            Description = "January 2025 Registration",
                            EndDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LateRegistrationEnd = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LateRegistrationFee = 50m,
                            LateRegistrationStart = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Semester = "January",
                            StartDate = new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchContributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContributionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchContributorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResearchProjectID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchContributorID");

                    b.HasIndex("ResearchProjectID");

                    b.ToTable("ResearchContributors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContributionDetails = "Assisted with data analysis",
                            ResearchContributorID = "222CS01000694",
                            ResearchProjectID = 1,
                            Role = "Co-author"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResearchProjectID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UploadDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchProjectID");

                    b.ToTable("ResearchDocument");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainAuthorID");

                    b.ToTable("ResearchProjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abstract = "Research on AI applications in healthcare",
                            DateSubmitted = new DateTimeOffset(new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Department = "Computer Science",
                            Keywords = "AI, Healthcare",
                            MainAuthorID = "222CS01000694",
                            Status = 1,
                            Title = "AI in Healthcare"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResourceBorrowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LateFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LibraryResourceID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryResourceID");

                    b.HasIndex("StudentId");

                    b.ToTable("ResourceBorrowings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BorrowDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LibraryResourceID = 1,
                            Status = 0,
                            StudentId = "222CS01000694"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.SemesterRecord", b =>
                {
                    b.Property<Guid>("SemesterRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditsAttempted")
                        .HasColumnType("int");

                    b.Property<int>("CreditsEarned")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<double>("SemesterGPA")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("TranscriptID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SemesterRecordID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TranscriptID");

                    b.ToTable("SemesterRecords");

                    b.HasData(
                        new
                        {
                            SemesterRecordID = new Guid("ec781519-440f-4faf-9952-3510156a3681"),
                            AcademicYear = "2021-2022",
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            EndDate = new DateTimeOffset(new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 0,
                            SemesterGPA = 0.0,
                            StartDate = new DateTimeOffset(new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5")
                        },
                        new
                        {
                            SemesterRecordID = new Guid("95ef9ac5-1d08-4844-94ae-f4a82586b11a"),
                            AcademicYear = "2021-2022",
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            EndDate = new DateTimeOffset(new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 1,
                            SemesterGPA = 0.0,
                            StartDate = new DateTimeOffset(new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5")
                        },
                        new
                        {
                            SemesterRecordID = new Guid("92a7df56-02f9-4a54-84c5-14783483c468"),
                            AcademicYear = "2022-2023",
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            EndDate = new DateTimeOffset(new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 0,
                            SemesterGPA = 0.0,
                            StartDate = new DateTimeOffset(new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5")
                        },
                        new
                        {
                            SemesterRecordID = new Guid("5ca833fc-9ec9-4a96-b3bf-ffa8d2b52354"),
                            AcademicYear = "2022-2023",
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            EndDate = new DateTimeOffset(new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 1,
                            SemesterGPA = 0.0,
                            StartDate = new DateTimeOffset(new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5")
                        },
                        new
                        {
                            SemesterRecordID = new Guid("bb5f7c7e-1ee4-4190-b25f-5415d8d4a509"),
                            AcademicYear = "2023-2024",
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            EndDate = new DateTimeOffset(new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 0,
                            SemesterGPA = 0.0,
                            StartDate = new DateTimeOffset(new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5")
                        },
                        new
                        {
                            SemesterRecordID = new Guid("59010ca2-d29b-482f-9dd6-5ab521f2bd49"),
                            AcademicYear = "2023-2024",
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            EndDate = new DateTimeOffset(new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 1,
                            SemesterGPA = 0.0,
                            StartDate = new DateTimeOffset(new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5")
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Student", b =>
                {
                    b.Property<string>("StudentID")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("AcademicAdvisor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = "222CS01000694",
                            AcademicAdvisor = "Mr. Michael Asare",
                            Address = "Kings and Queens Residence",
                            DateOfBirth = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Degree = "BSc Computer Science",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729"),
                            EmergencyContactName = "Kojo Ansah Affram",
                            EmergencyContactPhone = "0501122334",
                            FirstName = "Kwaku",
                            Gender = 0,
                            LastName = "Affram",
                            StudentEmail = "kwakuaffram@gmail.com",
                            StudentPhone = "0553138727",
                            StudentPhotoUrl = "https://unsplash.com/photos/a-man-in-a-yellow-shirt-smiling-at-the-camera-ZjDbRtR_BcE"
                        },
                        new
                        {
                            StudentID = "222CS01000695",
                            AcademicAdvisor = "Papa Prince",
                            Address = "Kings and Queens Residence",
                            DateOfBirth = new DateTimeOffset(new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Degree = "BSc Computer Science",
                            DepartmentID = new Guid("b729e5ec-b369-4a88-9c2a-5564fd577729"),
                            EmergencyContactName = "Kwaku Ampem Affram",
                            EmergencyContactPhone = "0506590716",
                            FirstName = "Patricia",
                            Gender = 1,
                            LastName = "Affram",
                            StudentEmail = "adubea@example.com",
                            StudentPhone = "0553138727",
                            StudentPhotoUrl = "https://unsplash.com/photos/man-in-yellow-blazer-and-blue-denim-jeans-smiling-PK_t0Lrh7MM"
                        });
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Transcript", b =>
                {
                    b.Property<Guid>("TranscriptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcademicStanding")
                        .HasColumnType("int");

                    b.Property<int>("CreditsAttempted")
                        .HasColumnType("int");

                    b.Property<int>("CreditsEarned")
                        .HasColumnType("int");

                    b.Property<double>("CummulativeGPA")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("GeneratedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("isOfficial")
                        .HasColumnType("bit");

                    b.HasKey("TranscriptID");

                    b.HasIndex("StudentID");

                    b.ToTable("Transcripts");

                    b.HasData(
                        new
                        {
                            TranscriptID = new Guid("ddea038a-a52c-4e6e-ae9a-760c863c6ea5"),
                            AcademicStanding = 2,
                            CreditsAttempted = 0,
                            CreditsEarned = 0,
                            CummulativeGPA = 0.0,
                            GeneratedDate = new DateTimeOffset(new DateTime(2024, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StudentID = "222CS01000694",
                            isOfficial = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Course", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.CourseStudent", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.RegistrationPeriod", "RegistrationPeriod")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("RegistrationPeriodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("RegistrationPeriod");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.CourseTimeSlot", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Course", "Course")
                        .WithMany("CourseTimeSlots")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Department", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.EvaluationResponse", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.EvaluationQuestion", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("EvaluationQuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.LecturerEvaluation", "Evaluation")
                        .WithMany("Responses")
                        .HasForeignKey("LecturerEvaluationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.FeeItem", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.FinancialRecord", "FinancialRecord")
                        .WithMany("FeeItems")
                        .HasForeignKey("FinancialRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialRecord");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.FinancialRecord", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany("FinancialRecords")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Grade", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.SemesterRecord", "SemesterRecord")
                        .WithMany("Grades")
                        .HasForeignKey("SemesterRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("SemesterRecord");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Invoice", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.FinancialRecord", "FinancialRecord")
                        .WithMany()
                        .HasForeignKey("FinancialRecordID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialRecord");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.InvoiceLineItem", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.FeeItem", "FeeItem")
                        .WithMany()
                        .HasForeignKey("FeeItemID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSchool_Solution.Entities.Invoice", "Invoice")
                        .WithMany("LineItems")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeItem");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Lecturer", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LecturerCourse", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Course", "Course")
                        .WithMany("LecturerCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerCourses")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LecturerEvaluation", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iSchool_Solution.Entities.EvaluationPeriod", "EvaluationPeriod")
                        .WithMany("Evaluations")
                        .HasForeignKey("EvaluationPeriodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.Lecturer", "Lecturer")
                        .WithMany("Evaluations")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EvaluationPeriod");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Notification", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ApiUser", "Student")
                        .WithMany("Notifications")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Payment", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.FinancialRecord", "FinancialRecord")
                        .WithMany("Payments")
                        .HasForeignKey("FinancialRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialRecord");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.PaymentGatewayTransaction", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.PaymentReminder", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.FeeItem", "FeeItem")
                        .WithMany()
                        .HasForeignKey("FeeItemID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("iSchool_Solution.Entities.FinancialRecord", "FinancialRecord")
                        .WithMany()
                        .HasForeignKey("FinancialRecordID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeeItem");

                    b.Navigation("FinancialRecord");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchContributor", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ApiUser", "Contributor")
                        .WithMany()
                        .HasForeignKey("ResearchContributorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.ResearchProject", "Project")
                        .WithMany("Contributors")
                        .HasForeignKey("ResearchProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchDocument", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ResearchProject", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ResearchProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchProject", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.ApiUser", "MainAuthor")
                        .WithMany()
                        .HasForeignKey("MainAuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainAuthor");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResourceBorrowing", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.LibraryResource", "Resource")
                        .WithMany("BorrowingRecords")
                        .HasForeignKey("LibraryResourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.ApiUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.SemesterRecord", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iSchool_Solution.Entities.Transcript", "Transcript")
                        .WithMany("SemesterRecords")
                        .HasForeignKey("TranscriptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Student", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Transcript", b =>
                {
                    b.HasOne("iSchool_Solution.Entities.Student", "Student")
                        .WithMany("Transcripts")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ApiUser", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Course", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("CourseTimeSlots");

                    b.Navigation("Grades");

                    b.Navigation("LecturerCourses");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.EvaluationPeriod", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.EvaluationQuestion", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.FinancialRecord", b =>
                {
                    b.Navigation("FeeItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Invoice", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Lecturer", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("LecturerCourses");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LecturerEvaluation", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.LibraryResource", b =>
                {
                    b.Navigation("BorrowingRecords");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.RegistrationPeriod", b =>
                {
                    b.Navigation("CourseEnrollments");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.ResearchProject", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.SemesterRecord", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Student", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("FinancialRecords");

                    b.Navigation("Grades");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("iSchool_Solution.Entities.Transcript", b =>
                {
                    b.Navigation("SemesterRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
